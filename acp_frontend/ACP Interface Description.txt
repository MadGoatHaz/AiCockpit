ACP Interface

Project Name: AiCockpit
Core Purpose: AiCockpit aims to be a comprehensive, collaborative development environment designed to seamlessly integrate human developers with AI coding assistants. It provides a "cockpit" for developers to pilot AI models, manage projects, monitor systems, and streamline the AI-assisted software development lifecycle.
Key Philosophy: To empower developers by bringing AI directly into their workflow, fostering a synergistic relationship where human intuition and AI capabilities combine to achieve greater productivity and innovation in coding and AI model interaction.
Target Audience: Individual developers, AI researchers, and teams working on software projects that can benefit from or involve AI assistance. This includes coding, AI model fine-tuning, data analysis, and system monitoring.
Branding Note: "AiSight" is a key feature/module within the larger AiCockpit project, specifically focused on providing metrics and system visibility.
This section details features that are currently implemented, even if some aspects (like AI responses or file system operations) are simulated on the client-side for prototyping purposes.

The Workspaces page is the central area where users interact with their projects and AI.

Tabbed Interface:
Functionality: Allows users to manage multiple, independent project workspaces.
Add Workspace: A "+" button allows dynamic creation of new workspaces (e.g., "Workspace D", "Workspace E"). New workspaces start with a default minimal file structure (README.md, src/main.js) and default layout/AI configurations.
Close Workspace: An 'x' button on each tab (except the last one) allows users to close workspaces.
State Persistence (Session-based):
Workspace-specific panel layouts (visibility, width, height).
Selected file path in the File Browser.
Expanded/collapsed folder states in the File Browser.
AI model selection and advanced model tuning parameters.
File content modifications (simulated, after AI suggestions are "accepted").
Workspace-level settings (Public/Private, Allow Access, Terminal Order).
Configurable Panel Layout: Each workspace tab contains a highly customizable grid of panels.
Main Panels Available:
File Browser
AI Chat
File Viewer
Workspace Settings
AI Model & Parameters
Terminal Manager
Customization Controls (per panel, per workspace, within panel headers):
Visibility Toggle: An eye/eye-off icon button to show or hide each of the main five content panels (File Browser, AI Chat, File Viewer, Workspace Settings, AI Model & Parameters).
"Hidden Panels" Area: A distinct, dashed-border card appears at the top if any panels are hidden, providing buttons to restore their visibility.
Width Control: (For File Browser, AI Chat, File Viewer, Workspace Settings, AI Model & Parameters) A group of 'S', 'M', 'L' buttons with tooltips (e.g., "Small (1/3)", "Medium (1/2)", "Large (2/3)") mapping to column spans on a 6-column responsive grid.
Height Control: (For all six main panels) A compact dropdown with an icon, allowing selection of "Small", "Medium", or "Large" preset heights. Panel content uses ScrollArea for overflow.
Underlying Grid: A CSS grid (currently md:grid-cols-6 for the top row of panels) allows panels to reflow based on their visibility and configured column spans. The Terminal Manager typically spans the full width below.
File Browser Panel:
Display: Hierarchically shows files and folders for the active workspace. Uses lucide-react icons (Folder, FileIcon) and chevrons (ChevronRight, ChevronDown) to indicate folder expansion state.
Interactivity:
Allows selection of files or folders.
Highlights the currently selected item.
Supports expanding and collapsing folders.
Functionality:
File Upload: An "Upload File" button (UploadCloud icon) in the header allows users to select local files. Text-based files are "added" to the workspace's root with their content read (client-side simulation). Non-text files get placeholder content.
AI Chat Panel (contains ModelInteractionForm):
Input: Textarea for user prompts. Placeholder text is contextual:
If a file/folder is selected: "Enter your prompt, ask for code, or describe the task..."
If nothing selected: "Ask a general question in {Workspace Name}, or select a file/folder to provide context."
Input clears if the selected file context is removed.
Output: Displays simulated AI responses, with a visual "streaming" effect.
AI Suggestion System ("Defs"):
The AI can (randomly, in simulation) offer structured code suggestions as a distinct card below its main response.
Suggestions include a title, description, and a preview of the suggested code.
Actions: "Accept & Apply" and "Reject" buttons.
Accept: Simulates applying the code change to the currently selected file in the File Viewer. Triggers a toast.
Reject: Dismisses the suggestion. Triggers a toast.
File Viewer Panel:
Display: Shows the content of the file currently selected in the File Browser. Uses a pre tag for mock content display.
Placeholders:
If a folder is selected: Shows a large Folder icon, folder path, and a prompt to select a file.
If no item is selected: Shows a large FileCode2 icon and a prompt to select a file.
Dynamic Updates: Content updates if an AI suggestion modifying the viewed file is accepted.
Workspace Settings Panel:
Header: Dynamically includes the current workspace name.
Content:
Workspace Toggles (styled rows):
"Public/Private": Switch with dynamic label (e.g., "Workspace '{name}' is Public/Private").
"Allow Access to Others": Switch with dynamic label controlling the conceptual ability of this workspace to access other public workspaces.
"Terminal At Top": Switch with dynamic label to toggle the vertical position of the Terminal Manager block.
Each toggle has descriptive subtext.
Footer: Contains the "Reset Workspace to Defaults" button.
AI Model & Parameters Panel:
Header: Dynamically includes the current workspace name.
Content:
Model Selection: A Select dropdown to choose a (simulated) AI model (e.g., "Summarizer Pro", "General Coding Assistant").
Advanced Model Settings (Accordion):
Trigger: "Advanced Model Settings" with a Settings2 icon.
Parameters (each with Label, Slider, current value display, and Tooltip explanation):
Temperature: (0-2, step 0.1) - Controls randomness.
Max Output Tokens: (64-8192, step 128) - Controls response length.
Context Window Size: (1024-16384, step 1024) - Max input tokens considered.
Top K: (0-100, step 1) - Considers top K probable tokens.
Top P (Nucleus): (0-1, step 0.01) - Considers tokens up to cumulative probability P.
Simulated parameters are logged and included in mock AI response text.
Terminal Manager Panel:
Tabbed Interface: Uses ShadCN Tabs for multiple simulated terminal instances within a workspace.
Functionality:
"Add Tab" button (PlusCircle icon). Max 5 tabs (simulated limit).
Close button ('x' icon) on each tab (except the last one).
Simulated Terminal (SimulatedTerminal component):
Recognizes mock commands: ls, echo [text], pwd, date, clear, whoami, help.
Displays simulated command output.
Maintains command history per tab.
Input field with prompt prefix reflecting workspace and terminal tab name.
Placeholder: Message displayed if no terminal tabs are open.
"Reset Workspace to Defaults" Functionality:
Button located in the "Workspace Settings" panel footer.
Resets for the active workspace:
Panel layouts (visibility, width, height).
Workspace-specific settings (Public/Private, Allow Access, Terminal Order).
AI model selection and all advanced parameters.
Selected file path in File Browser (to none).
Expanded folder states in File Browser (to none, unless a default is specified for predefined workspaces like Alpha's "src" folder).
File tree content (reverts to original mock data, removing uploaded files and AI modifications).
Provides a toast notification upon completion.
Dedicated to providing a high-level view of system and AI model performance.

Key Metrics Display (KeyMetricsCard):
Cards for: Active AI Agents, CPU Utilization, Memory Usage, Critical Alerts, Processed Tasks, Average Model Latency.
Each card shows a title, value, icon, description, and a trend indicator.
Trend Indicators: Dynamically colored based on semantic meaning (e.g., green for positive trends like "improvement", orange/yellow for cautionary trends like "degradation" or increased error rates). Uses theme colors for success and warning.
Charts (recharts & ShadCN Chart components):
SystemHealthChart: Bar chart displaying mock system health percentage over recent time intervals.
ModelPerformanceChart: Line chart showing mock trends for "Model A" and "Model B" accuracy (%) and latency (ms) over several months. Includes a legend.
For viewing and managing AI-related logs.

LogStreamView Component:
Displays a continuously updating (simulated) stream of log entries.
Each entry shows timestamp, log level (INFO, WARN, ERROR, DEBUG with color coding), optional Agent ID, and message.
Automatically scrolls to the latest log entry.
LogSummarizer Component:
Input: A Textarea for users to paste verbose logs.
Action: A "Summarize Logs" button triggers a server action (handleSummarizeLogs).
AI Integration: The server action calls a Genkit flow (summarize-logs.ts) to generate a concise summary of the provided logs.
Output: Displays the AI-generated summary in a read-only area.
Feedback: Uses toast notifications for success, failure, or input validation errors. Includes client-side and server-side checks for empty input.
For configuring and viewing system alerts.

AlertsTable Component:
Displays a table of mock configured alerts.
Columns: Name, Metric, Condition, Severity, Status, Actions (Edit/Delete placeholders).
Badges: Uses semantically colored badges for Severity (Critical, High, Medium, Low) and Status (Active, Inactive, Acknowledged) using theme colors.
CreateAlertModal Component:
Launched by a "Create New Alert" button.
A dialog form with fields for Name, Metric (Select), Condition (Select), Threshold (Input), Severity (Select).
Simulated save action with toast notification.
For visualizing historical performance trends.

Filter Controls:
Date Range Picker (DatePickerWithRange): Allows selecting a "from" and "to" date.
Metric Select: Dropdown to choose a metric (e.g., CPU Utilization, Memory Usage, Error Rate).
Chart Type Select: Dropdown to choose between "Line Chart" and "Bar Chart".
"Apply Filters" button (currently logs selections).
HistoricalDataChart Component:
Displays a chart (bar or line based on selection) of mock historical data for the selected metric and date range.
Dynamically updates title and description based on selections.
For overseeing the status of multiple AI agents or systems.

FleetStatusGrid Component:
Displays a grid of AgentCard components.
Responsive grid layout.
AgentCard Component:
Shows mock data for individual AI agents: Name, ID.
Status Display: Shows agent status (Online, Offline, Warning, Error) with a corresponding lucide-react icon and a semantically colored Badge.
Metrics: CPU Usage (with a Progress bar), Tasks Processed, Last Heartbeat.
Header Controls: Placeholders for search input and a filter button.
A placeholder for future live project execution viewing.

Content: Displays a message indicating this area is for a live instance of the selected workspace.
Interactivity: An "Open in New Tab (Simulated)" button which, when clicked, shows a toast notification explaining the feature is conceptual.
Main Application Layout (src/app/(app)/layout.tsx):
Uses SidebarProvider to manage the main sidebar state.
Main Sidebar (AppSidebar):
Collapsible (to icon-only mode).
Uses components/ui/sidebar.tsx components for structure.
Displays "AiCockpit" title and Gauge logo.
Navigation items (NAV_ITEMS from constants.ts) with icons and labels. Tooltips appear when collapsed.
Header Bar:
Mobile Menu Trigger (Sheet): Hamburger icon (PanelLeft) opens a sheet-based navigation menu for small screens.
Desktop Sidebar Trigger: PanelLeft icon button in the header to toggle the main sidebar's collapsed/expanded state.
Persistent Info Widgets Toggle: A DropdownMenu (triggered by a Gauge icon) allows users to toggle the visibility of small, fixed-position info cards.
Persistent Info Widgets (Fixed Overlay):
Appear in the bottom-right corner, visible across all app pages if toggled on.
Styled Card components with a semi-transparent, blurred background.
Widgets for (simulated data): CPU Usage, Memory Usage, GPU Memory, GPU Usage, Critical Alerts. Each with an icon and compact metric display.
Styling & Theming:
Tech: ShadCN UI components built on Radix UI and Tailwind CSS.
Theme: Custom HSL-based theme defined in src/app/globals.css.
Primary: Deep Purple (#673AB7)
Background: Dark Gray (#303030)
Foreground: Light Gray/White (#E0E0E0)
Accent: Electric Blue (#29ABE2)
Status Colors: Defined for success (green) and warning (yellow/orange).
Fonts: Geist Sans and Geist Mono (from next/font/google).
Icons: lucide-react used consistently.
Overall Feel: Modern, professional, dashboard-style with rounded corners, shadows, and subtle animations.
Toaster: useToast hook and Toaster component for displaying non-intrusive notifications.
Project Structure:
src/app/: Next.js App Router for pages and layouts.
(app): Route group for main application views requiring AppLayout.
page.tsx: Entry point, redirects to /interact.
layout.tsx: Root layout (html, body, fonts, Toaster).
globals.css: Global styles and Tailwind CSS theme variables.
src/components/: Reusable UI components.
ui/: ShadCN UI primitive components (button, card, dialog, etc.).
Feature-specific folders: alerts/, dashboard/, fleet/, history/, icons/, interact/, layout/, logs/, workspaces/.
src/lib/: Shared utilities, constants, and type definitions.
constants.ts: Navigation items (NAV_ITEMS).
utils.ts: cn utility for Tailwind class merging.
types.ts: Common type definitions (currently minimal).
src/ai/: Genkit AI integration.
genkit.ts: Genkit initialization and configuration (e.g., Google AI plugin).
flows/summarize-logs.ts: Example Genkit flow for log summarization.
dev.ts: For Genkit development server.
src/hooks/: Custom React hooks (use-toast.ts, use-mobile.ts).
Technology Stack:
Framework: Next.js (v15.2.3, App Router)
UI Library: React (v18.3.1), ShadCN UI
Styling: Tailwind CSS, CSS Variables
Language: TypeScript
AI Toolkit: Genkit (v1.8.0)
Icons: lucide-react
State Management:
Primarily client-side React state (useState, useEffect, useMemo, useRef).
State is lifted to the lowest common ancestor where necessary. For instance, WorkspacesPage manages the state for its tabs, including their individual layouts, file trees, selected files, expanded folders, and AI configurations, to ensure persistence across tab switches within the current session.
Component Design:
Emphasis on functional components and React Hooks.
"use client" directive used for components requiring client-side interactivity or browser APIs. Server Components are the default where possible.
Modular components, aiming for reusability (e.g., KeyMetricsCard, AgentCard).
Styling Approach:
Utility-first with Tailwind CSS.
cn utility from @/lib/utils for conditional class names.
Centralized theme colors using HSL CSS variables in globals.css, making theme adjustments easier.
AI Integration (Current):
A functional Genkit flow (summarize-logs.ts) is implemented and invoked via a Next.js Server Action from the Log Summarizer component.
Other AI interactions (e.g., in the AI Chat panel) are currently simulated on the client-side but are designed to conceptually integrate with backend AI services/Genkit flows.
Foundation: Initial setup of core pages (Dashboard, Logs, Alerts, History, Fleet, AI Interaction placeholder) with basic mock data and ShadCN components.
Branding & Navigation: Evolved from "AiSight" as the main project to "AiCockpit" with "AiSight" as a specialized metrics page. Sidebar navigation and icons refined.
Workspaces Evolution:
Started as a simple "AI Interaction" page.
Transformed into a tabbed "Workspaces" interface.
Added panel layout customization (visibility, width, height for File Browser, AI Chat, File Viewer, etc.).
Introduced simulated File Browser, File Viewer, and AI Chat with suggestion capabilities.
Integrated a simulated multi-tab Terminal Manager.
Implemented state persistence for layouts, file states, and AI configurations per workspace tab (session-based).
Added file upload (client-side simulation) functionality.
Added workspace creation and deletion.
Refined panel headers and content padding for consistency.
AiSight Page (Metrics Dashboard): Expanded with more key metrics cards and a model performance chart; improved trend indicator styling.
Log Summarizer: Implemented actual Genkit flow for summarization via Server Actions; improved error handling and UX.
Layout Enhancements: Added persistent info widgets (CPU, Memory, etc.) toggleable from the main app header.
Styling & Theming: Established a custom color theme in globals.css and applied it consistently. Improved badge semantics.
Bug Fixing: Addressed several React.Children.only errors related to asChild prop usage and React is not defined errors by ensuring proper React imports. Fixed HTML validation errors like nested buttons.
This outlines features discussed or logical next steps to realize the full vision of AiCockpit.

Workspaces - Core Functionality:
Real File System Backend: Integrate with a backend to manage actual project files and directories. This is fundamental for true development work.
Full Code Editor: Replace the placeholder File Viewer with a feature-rich code editor (e.g., Monaco Editor integration) supporting syntax highlighting, IntelliSense (potentially AI-driven), and direct editing.
AI-Powered File Operations: Enable the AI Chat to read file content, understand context across multiple files, and directly propose and apply changes (diffs) to files in the workspace.
Real Terminal Integration: Connect the Terminal Manager to a backend service that can execute real shell commands within a secure environment relevant to the workspace/project.
AI Terminal Interaction: Allow AI to view terminal output and suggest/execute commands.
Version Control (Git) Integration:
Clone from GitHub/GitLab repositories.
Stage changes, commit, push, pull, branch directly from AiCockpit.
AI assistance for commit messages, code review summaries.
Workspace Lifecycle Management: Robust renaming, duplication, and secure deletion of workspaces (persisted).
Build & Run Project: Integrate tools to build and run the project within the selected workspace, with output directed to the Live Preview or terminal.
Workspaces - Advanced Layout & UX:
Drag-and-Drop Panel Reordering & Resizing: Implement true desktop-like panel management (likely requiring a library like react-grid-layout or react-rnd).
Save/Load Custom Layouts: Allow users to save and load their preferred panel arrangements per workspace or globally.
Live Preview Page:
Backend Service: Develop a service to dynamically start and manage dev servers for user projects.
Secure Embedding: Use sandboxed iframes or similar technology to display the running project.
Integrated DevTools: Consider ways to provide basic inspection or console access for the previewed application.
Device Toggles: Allow previewing on different simulated screen sizes.
AI Integration (Genkit & Beyond):
More Genkit Flows:
Code generation (functions, components, tests).
Code explanation and documentation generation.
Debugging assistance (analyzing errors, suggesting fixes).
Refactoring suggestions.
Advanced Tool Use: Empower AI agents with tools to interact with the file system, version control, and build processes.
Model Fine-Tuning Interface: (Ambitious) Potentially a dedicated area for managing and fine-tuning smaller, specialized models based on workspace data.
Contextual Awareness: Improve AI's ability to understand the broader project context beyond just the open file.
Image Generation: Integrate Genkit's image generation for UI mockups, diagrams, or asset creation if applicable.
Data Persistence & Backend:
Database: Implement a backend database (e.g., Firestore, Supabase, PostgreSQL) to store:
User accounts and authentication.
Workspace configurations (layouts, settings, file metadata).
Project files (if not solely relying on Git).
Alert definitions, historical metric data.
AI interaction logs and suggestions.
Real-time Features:
Metrics: Connect AiSight dashboard and persistent info widgets to real backend monitoring services or APIs.
Alerts System: Full backend implementation for alert condition evaluation and a robust notification system (in-app, email, etc.).
User Management:
Authentication and Authorization.
User profiles and preferences.
Collaboration (Long-term):
Shared Workspaces: Allow multiple users to collaborate on the same workspace.
Real-time Co-editing: (Very ambitious) Similar to Google Docs or VS Code Live Share.
Commenting and Review Features.
Advanced Log Management:
Server-side log aggregation.
Powerful search, filtering, and analysis tools for logs on the "Log Streaming" page.
Structured logging from AI agents and system components.
Color Palette:
Primary: Deep purple (#673AB7)
Background: Dark gray (#303030)
Foreground (Text): Light gray/White (#E0E0E0)
Accent: Electric blue (#29ABE2)
Status: Green for success, Yellow/Orange for warning, Red for destructive/error.
Typography: Clean and modern sans-serif fonts (Geist Sans, Geist Mono).
Iconography: Minimalist and consistent, primarily using lucide-react.
Layout Style: Dashboard-style with flexible, modular components. Emphasis on information density and clear hierarchy.
UI Elements: Rounded corners, subtle shadows, and smooth transitions to enhance user experience without being distracting. Professional and polished aesthetic.
This document provides a snapshot of AiCockpit's current state and future direction. It will evolve as the project progresses.
